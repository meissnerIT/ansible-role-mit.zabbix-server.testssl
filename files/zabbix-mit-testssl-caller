#!/usr/bin/env python3
#
# Distributed via ansible - mit.zabbix-server.testssl
#
# #17257: Finds all hosts using mit-testssl-* (like mit-testssl-http or
# mit-testssl-smtp) via Zabbix API and runs zabbix-mit-testssl <host> <protocol>
#
# Idempotent - can be called as often as you wish.
#
# zabbix-mit-testssl-caller -> zabbix-mit-testssl -> zabbix-mit-testssl-helper
#
# 2021-10-05: Calls now zabbix-mit-testssl
# 2023-05-09: Upgrade to python3, pyzabbix 1.3.0

import configparser
import os
import subprocess
import sys
import logging
# https://github.com/lukecyca/pyzabbix
from pyzabbix import ZabbixAPI

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
shStdout = logging.StreamHandler(sys.stdout)
shStdout.setFormatter(formatter)
shStderr = logging.StreamHandler(sys.stderr)
shStderr.setFormatter(formatter)
shStderr.setLevel(logging.ERROR)

log = logging.getLogger(os.path.basename(__file__))
log.addHandler(shStdout)
log.addHandler(shStderr)
log.setLevel(logging.INFO)

#logpz = logging.getLogger('pyzabbix')
#logpz.addHandler(shStdout)
#logpz.setLevel(logging.DEBUG)

configParser = configparser.RawConfigParser()
configFilePath = r'/etc/zabbix/zabbix_agentd-mit-testssl.sh.conf'
configParser.read(configFilePath)

log.info("Starting")

##############################################################################
# mit-pyzabbix.py v2023-05-09
##############################################################################
# https://github.com/lukecyca/pyzabbix/issues/157
# detect_version=False only needed for pyzabbix < 1.3
zapi = ZabbixAPI(configParser.get('DEFAULT', 'zabbix-api.url'))
if configParser.has_option('DEFAULT', 'zabbix-api.verify'):
    # https://requests.readthedocs.io/en/master/user/advanced/#ssl-cert-verification
    zapi.session.verify = configParser.get('DEFAULT', 'zabbix-api.verify')
elif not configParser.getboolean('DEFAULT', 'zabbix-api.certificate_verification', fallback=True):
    # https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
    urllib3.disable_warnings()
    zapi.session.verify = False
    log.info("Disabled certificate verification - please don't use this in production!")

zapi.login(configParser.get('DEFAULT', 'zabbix-api.user'), configParser.get('DEFAULT', 'zabbix-api.password'))
log.debug("Connected to Zabbix API Version %s" % zapi.api_version())

# sort in order to get the same order within every call, makes debugging easier
for item in zapi.item.get(search={ "key_": "mit-testssl" }, sortfield="itemid", monitored="true"):
    hostid=item["hostid"]
    hosts = zapi.host.get(hostids=item["hostid"])
    if hosts:
        host = hosts[0]['host']
        #log.debug("Got %s (id=%s) with %s:%s"% (hosts[0]['host'], hostid, hostconn, httpsport))
        if item["key_"] == "mit-testssl-http":
            protocol = "http"
        elif item["key_"] == "mit-testssl-imap":
            protocol = "imap"
        elif item["key_"] == "mit-testssl-smtp":
            protocol = "smtp"
        else:
            log.error("Item with key=%s not supported" % item["key_"])
        if protocol:
            testsslCmd = ["/usr/local/bin/zabbix-mit-testssl", protocol, host]
            #testsslCmd = ["echo"]
            log.debug("Executing %s for %s (id=%s)" % (testsslCmd, host, hostid))
            testsslOutput = subprocess.check_output(testsslCmd).strip()
            log.info("Output from %s: \n%s" % (testsslCmd, testsslOutput))

log.info("READY.")
