#!/opt/mit-testssl.sh/.venv/bin/python3
#
# Distributed via ansible - mit.zabbix-server.testssl
#
# #17257: Finds all hosts using mit-testssl-* (like mit-testssl-http or
# mit-testssl-smtp) via Zabbix API and runs zabbix-mit-testssl <host> <protocol>
#
# Idempotent - can be called as often as you wish.
#
# zabbix-mit-testssl-caller -> zabbix-mit-testssl -> zabbix-mit-testssl-helper
#
# 2021-10-05: Calls now zabbix-mit-testssl
# 2023-05-09: Upgrade to python3, pyzabbix 1.3.0
# 2024-09-19: Added support for zabbix-7

import argparse
import configparser
import os
import subprocess
import sys
import logging
import urllib3
# https://github.com/lukecyca/pyzabbix
from pyzabbix import ZabbixAPI

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
shStdout = logging.StreamHandler(sys.stdout)
shStdout.setFormatter(formatter)
shStderr = logging.StreamHandler(sys.stderr)
shStderr.setFormatter(formatter)
shStderr.setLevel(logging.ERROR)

log = logging.getLogger(os.path.basename(__file__))
log.addHandler(shStdout)
log.addHandler(shStderr)
log.setLevel(logging.INFO)

#logpz = logging.getLogger('pyzabbix')
#logpz.addHandler(shStdout)
#logpz.setLevel(logging.DEBUG)

##############################################################################
# Read command line arguments
##############################################################################

parser = argparse.ArgumentParser()
parser.add_argument("--config_file", default="{{ mit_testssl_etc_dir }}/mit-testssl.sh.conf")
args = parser.parse_args()

if not os.path.isfile(args.config_file):
    sys.exit("config_file '{}' not found".format(args.config_file))

configParser = configparser.RawConfigParser()
configFilePath = args.config_file
configParser.read(configFilePath)

log.info("Starting")

##############################################################################
# mit-pyzabbix.py v2023-09-20
##############################################################################
# https://github.com/lukecyca/pyzabbix/issues/157
# detect_version=False only needed for pyzabbix < 1.3
zapi = ZabbixAPI(configParser.get('DEFAULT', 'zabbix-api.url'))
if configParser.has_option('DEFAULT', 'zabbix-api.verify'):
    # https://requests.readthedocs.io/en/master/user/advanced/#ssl-cert-verification
    zapi.session.verify = configParser.get('DEFAULT', 'zabbix-api.verify')
elif not configParser.getboolean('DEFAULT', 'zabbix-api.certificate_verification', fallback=True):
    # https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
    urllib3.disable_warnings()
    zapi.session.verify = False
    log.info("Disabled certificate verification - please don't use this in production!")

# https://requests.readthedocs.io/en/latest/user/advanced/#proxies
if configParser.has_option('DEFAULT', 'zabbix-api.proxy'):
    proxies = {
        'http': configParser.get('DEFAULT', 'zabbix-api.proxy'),
        'https': configParser.get('DEFAULT', 'zabbix-api.proxy')
    }
    zapi.session.proxies.update(proxies)

zapi.login(configParser.get('DEFAULT', 'zabbix-api.user'), configParser.get('DEFAULT', 'zabbix-api.password'))
log.debug("Connected to Zabbix API Version %s" % zapi.api_version())

if zapi.version.major < 7:
    host_proxy_id_fieldname = 'proxy_hostid'
else:
    host_proxy_id_fieldname = 'proxyid'

only_check_hosts_on_proxy = configParser.get('DEFAULT', 'zabbix-api.only_check_hosts_on_proxy', fallback='')
if only_check_hosts_on_proxy:
    # With zabbix-7 this has stopped working:
    #proxy = zapi.proxy.get(search={ "host": only_check_hosts_on_proxy })
    #if proxy:
    #    proxy_id = int(proxy[0]['proxyid'])
    #    log.info(f"Only checking hosts with proxy_hostid={proxy_id} ({only_check_hosts_on_proxy})")
    #else:
    #    raise ValueError(f"Could not find zabbix-api.only_proxy={only_check_hosts_on_proxy}!")
    proxy_list = zapi.proxy.get()
    for proxy in proxy_list:
        if proxy['name'] == only_check_hosts_on_proxy:
            proxy_id = int(proxy['proxyid'])
            log.info(f"Only checking hosts with {host_proxy_id_fieldname}={proxy_id} ({only_check_hosts_on_proxy})")
    if not proxy:
        raise ValueError(f"Could not find zabbix-api.only_proxy={only_check_hosts_on_proxy}!")
else:
    proxy_id = 0

# sort in order to get the same order within every call, makes debugging easier
for item in zapi.item.get(search={ "key_": "mit-testssl" }, sortfield="itemid", monitored="1"):
    hostid=item["hostid"]
    hosts = zapi.host.get(hostids=item["hostid"])
    #hosts = zapi.host.get(hostids=item["hostid"], output=['host','proxy_hostid'])
    if hosts:
        host = hosts[0]['host']
        if int(hosts[0][host_proxy_id_fieldname]) == proxy_id:
            #log.debug("Got %s (id=%s) with %s:%s"% (hosts[0]['host'], hostid, hostconn, httpsport))
            if item["key_"] == "mit-testssl-http":
                protocol = "http"
            elif item["key_"] == "mit-testssl-imap":
                protocol = "imap"
            elif item["key_"] == "mit-testssl-smtp":
                protocol = "smtp"
            else:
                log.error("Item with key=%s not supported" % item["key_"])
            if protocol:
                testsslCmd = ["/opt/mit-testssl.sh/bin/mit-testssl.sh", protocol, host]
                #testsslCmd = ["echo"]
                log.debug("Executing %s for %s (id=%s)" % (testsslCmd, host, hostid))
                testsslOutput = subprocess.check_output(testsslCmd).strip()
                log.info("Output from %s: \n%s" % (testsslCmd, testsslOutput))
        else:
            log.info("%s with %s will be checked on proxy %s" % (host, item["key_"], hosts[0][host_proxy_id_fieldname]))
log.info("READY.")
